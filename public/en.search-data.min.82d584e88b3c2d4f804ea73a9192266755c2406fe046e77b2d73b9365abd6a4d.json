[{"id":0,"href":"/docs/before-start/install-python/","title":"Install Python","section":"Before Start","content":" Install Python # How to install Python # There a couple of ways to install Python in your computer:\nYou can go to the official page and follow the given instructions for your operation system. You can use the asdf. Validate Python is installed # Once you have Python installed you should be able to run the following command in the terminal:\npython --version # =\u0026gt; Python 3.12.0 "},{"id":1,"href":"/docs/chapters/hello-world/","title":"Hello World","section":"Chapters","content":" Hello World # You can find all the code for this chapter here\nIt is traditional for your first program in a new language to be Hello, World.\nCreate a folder wherever you like Put a new file in it called hello.py and put the following code inside it class Hello: def hello(self) -\u0026gt; str: print(\u0026#34;Hello, world\u0026#34;) def main(): hello = Hello() To run it type python hello.py.\nHow it works # When you write a program in Python just can define a method and after that just call it.\nThe class keyword is how you define a class with a name and a body.\nThe def keyword is how you define a function with a name and a body.\nPython provide out of the box a function called print that we use to print out to the console.\nHow to test # How do you test this? It is good to separate your \u0026ldquo;domain\u0026rdquo; code from the outside world (side-effects).\nThe print is a side effect (printing to stdout) and the string we send in is our domain.\nSo let\u0026rsquo;s separate these concerns so it\u0026rsquo;s easier to test\nclass Hello: def hello(self) -\u0026gt; str: return \u0026#34;Hello, world\u0026#34; def main(): hello = Hello() print(hello.hello()) We have created a new function again with def called hello.\nNow create a new file called test_hello.py where we are going to write a test for our hello function\nfrom expects import equal, expect from hello import Hello class TestHello: def test_hello(self) -\u0026gt; None: hello = Hello() expect(hello.hello()).to(equal(\u0026#34;Hello, world\u0026#34;)) "},{"id":2,"href":"/docs/before-start/prepare-the-book/","title":"Prepare the project","section":"Before Start","content":" Prepare the project for this book # Once we have Python installed we need to create the folders structure in which we≈ïe going to write the code for each chapter.\nCreate the folder for the chapters and its tests # To do so, we need to create a couple of folders with the following command:\nmkdir tests src Create a new Python project # After that we\u0026rsquo;re in position of creating the project using poetry.\nTo do it, just run the following command in the terminal:\npoetry init This command will create a new file called pyproject.toml in which the dependencies will be.\npoetry add pytest expects "},{"id":3,"href":"/docs/before-start/install-pytest/","title":"Install Pytest","section":"Before Start","content":" Install Pytest # For this book we\u0026rsquo;re going to use Pytest as the testing framerwork.\nHow to install Pytest # In order to add a new library in our project we just need to run the following command:\npoetry add pytest expects If everything works fine now we\u0026rsquo;re in a position to create our first test.\nValidate Pytest is installed # You can find all the code for this chapter here\nOnce you have Pytest installed you need to create a new file called test_foo.py inside the src folder with the following code (right now don\u0026rsquo;t care about it!):\nfrom expects import expect, equal class TestFoo: def test_foo(self) -\u0026gt; None: expect(1).to(equal(1)) Save the file and run the following command in the terminal:\npoetry run pytest You should see something like these results:\ntest_foo.py . [100%] ================================================== 1 passed in 0.01s ================================================== "},{"id":4,"href":"/docs/chapters/README/","title":"Readme","section":"Chapters","content":" chapters # "},{"id":5,"href":"/docs/README/","title":"Readme","section":"Docs","content":" docs # "},{"id":6,"href":"/README/","title":"Readme","section":"Introduction","content":" content.en # "}]