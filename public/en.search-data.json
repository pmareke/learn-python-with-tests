{"/chapters/booleans/":{"data":{"booleans#Booleans":"BooleansYou can find all the code for this chapter here"},"title":"Booleans"},"/chapters/hello-world/":{"data":{"hello-world#Hello World":"Hello WorldYou can find all the code for this chapter here\nIt is traditional for your first program in a new language to be Hello, World.\nCreate a folder wherever you like. Create a new file in it called hello.py and put the following code inside it: def hello() -\u003e str: print(\"Hello, world\") hello() To run it type python hello.py.","how-it-works#How it works":"When you write a program in Python you just can define a method and after that just call it.\nThe def keyword is how you define a function with a name and a body.\nPython provide out of the box a function called print that we use to print out to the console.","how-to-test#How to test":"How do you test this? It is good to separate your “domain” code from the outside world (side-effects).\nThe print is a side effect (printing to stdout) and the string we send in is our domain.\nSo let’s separate these concerns so it’s easier to test\ndef hello() -\u003e str: return \"Hello, world\" print(hello()) We have created a new function again with def called hello.\nNow create a new file called test_hello.py where we are going to write a test for our hello function\nfrom expects import equal, expect from hello import hello class TestHello: def test_hello(self) -\u003e None: expect(hello()).to(equal(\"Hello, world\")) "},"title":"Hello World"},"/install-pytest/":{"data":{"how-to-install-pytest-and-expects#How to install Pytest and Expects":"In order to add a new library in our project we just need to run the following command:\npoetry add pytest expects If everything works fine now we’re in a position to create our first test.","install-pytest#Install Pytest":"Install PytestFor this book we’re going to use Pytest as the testing framerwork and expects as our assertion library.","validate-pytest-is-installed#Validate Pytest is installed":"You can find all the code for this chapter here\nOnce you have Pytest installed you need to create a new file called test_foo.py inside the src folder with the following code (right now don’t care about it!):\nfrom expects import expect, equal class TestFoo: def test_bar(self) -\u003e None: expect(1).to(equal(1)) Save the file and run the following command in the terminal:\npoetry run pytest You should see something like these results:\ntest_foo.py . [100%] ==================== 1 passed in 0.01s ==================== "},"title":"Install Pytest"},"/install-python/":{"data":{"how-to-install-python#How to install Python":"There a couple of ways to install Python in your computer:\nYou can go to the official page and follow the given instructions for your operation system. You can use the asdf. ","install-python#Install Python":"Install Python","validate-python-is-installed#Validate Python is installed":"Once you have Python installed you should be able to run the following command in the terminal:\npython --version # =\u003e Python 3.12.0 "},"title":"Install Python"},"/prepare-the-book/":{"data":{"create-a-new-python-project#Create a new Python project":"After that we’re in position of creating the project using poetry.\nTo do it, just run the following command in the terminal:\npoetry init This command will create a new file called pyproject.toml in which the dependencies will be saved.\npoetry add pytest expects ","create-the-folder-for-the-chapters-and-its-tests#Create the folder for the chapters and its tests":"To do so, we need to create a couple of folders with the following command:\nmkdir tests src ","prepare-the-project-for-this-book#Prepare the project for this book":"Prepare the project for this bookOnce we have Python installed we need to create the folders structure in which weŕe going to write the code for each chapter."},"title":"Prepare the project"}}