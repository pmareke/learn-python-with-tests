{"/docs/":{"data":{"":"","code-examples#Code Examples":"The code for each chapter is available here.","feedback#Feedback":" Add issues/submit PRs here. MIT license","learn-test-driven-development-with-python#Learn Test-Driven Development with Python":"","what-youll-need#What you\u0026rsquo;ll need":"⚠️ This book is just a replication of @quii’s Go book. ⚠️\nLearn Test-Driven Development with Python Explore the Python language by writing tests. Python is a good language for learning TDD because it is a simple language to learn and testing is really simple. Be confident that you’ll be able to start writing robust, well-tested systems in Python. Who this is for People who are interested in picking up Python. People who already know some Python, but want to explore testing more. What you’ll need A computer!. Installed Python. A text editor. Some experience with programming. Comfortable using the terminal. ","who-this-is-for#Who this is for":""},"title":"Learn Python with TDD"},"/docs/chapters/booleans/":{"data":{"":"You can find all the code for this chapter here","refactor#Refactor":" def test_has_permission(self): expect(has_permission(True, False)).to(be_false) expect(has_permission(True, True)).to(be_true) expect(has_permission(False, False)).to(be_false) def has_permission(is_admin, is_logged_in): return is_admin and is_logged_in ","refactor-1#Refactor":" def test_is_even(self): expect(is_even(4)).to(be_true) expect(is_even(5)).to(be_false) def is_even(n): return n % 2 == 0 ","truthy-and-falsy-in-python#Truthy and Falsy in Python":"In Python, there are a few values that are considered falsy, and everything else is truthy.\nLet’s validate our hypothesis with some tests:\nNote: In order to make our tests more dynamic, we’re going to parametrize them using pytest, more info here.\n@pytest.mark.parametrize( \"value\", [ True, 1, \"Hello\", [1, 2, 3], (1, \"x\") ], ) def test_is_truthy(self, value): expect(is_truthy(value)).to(be_true) @pytest.mark.parametrize( \"value\", [ False, 0, \"\", [], (), None, ], ) def test_is_falsy(self, value): expect(is_truthy(value)).to(be_false) Let’s implement the is_truthy function:\ndef is_truthy(value): return bool(value) We can say now that:\nTrue, 1, strings with values, and lists and tuples with items are truthy. False, 0, \"\", [], (), None are falsy. ","try-and-run-the-test#Try and run the test":"","try-and-run-the-test-1#Try and run the test":"","wrapping-up#Wrapping up":"What we have covered:\nParametrize our tests in order to test multiple cases. More practice of the TDD workflow. What is truthy and falsy in Python. The and and or operators. ","write-enough-code-to-make-it-pass#Write enough code to make it pass":" def has_permission(is_admin, is_logged_in): return false ","write-enough-code-to-make-it-pass-1#Write enough code to make it pass":" def is_even(n): return True ","write-the-minimal-amount-of-code-to-make-it-run#Write the minimal amount of code to make it run":" def has_permission(is_admin, is_logged_in): pass ","write-the-minimal-amount-of-code-to-make-it-run-1#Write the minimal amount of code to make it run":" def is_even(n): pass ","write-the-test-first#Write the test first":" def test_has_permission(self): expect(has_permission(True, False)).to(be_false) ","write-the-test-first-1#Write the test first":" def test_is_even(self): expect(is_even(4)).to(be_true) "},"title":"Booleans"},"/docs/chapters/hello-world/":{"data":{"":"You can find all the code for this chapter here\nIt is traditional for your first program in a new language to be Hello, World.\nCreate a folder wherever you like. Create a new file in it called hello.py and put the following code inside it: def hello() -\u003e str: print(\"Hello, world\") hello() To run it type python hello.py.","how-it-works#How it works":"When you write a program in Python you just can define a method and after that just call it.\nThe def keyword is how you define a function with a name and a body.\nPython provide out of the box a function called print that we use to print out to the console.","how-to-test#How to test":"How do you test this? It is good to separate your “domain” code from the outside world (side-effects).\nThe print is a side effect (printing to stdout) and the string we send in is our domain.\nSo let’s separate these concerns so it’s easier to test\ndef hello() -\u003e str: return \"Hello, world\" print(hello()) We have created a new function again with def called hello.\nNow create a new file called test_hello.py where we are going to write a test for our hello function\nfrom expects import equal, expect from hello import hello class TestHello: def test_hello(self) -\u003e None: expect(hello()).to(equal(\"Hello, world\")) "},"title":"Hello World"},"/docs/install-pytest/":{"data":{"":"For this book we’re going to use Pytest as the testing framerwork and expects as our assertion library.","how-to-install-pytest-and-expects#How to install Pytest and Expects":"In order to add a new library in our project we just need to run the following command:\npoetry add pytest expects If everything works fine now we’re in a position to create our first test.","validate-pytest-is-installed#Validate Pytest is installed":"You can find all the code for this chapter here\nOnce you have Pytest installed you need to create a new file called test_foo.py inside the src folder with the following code (right now don’t care about it!):\nfrom expects import expect, equal class TestFoo: def test_bar(self) -\u003e None: expect(1).to(equal(1)) Save the file and run the following command in the terminal:\npoetry run pytest You should see something like these results:\ntest_foo.py . [100%] ==================== 1 passed in 0.01s ==================== "},"title":"Install Pytest"},"/docs/install-python/":{"data":{"":"","how-to-install-python#How to install Python":"There a couple of ways to install Python in your computer:\nYou can go to the official page and follow the given instructions for your operation system. You can use the asdf. ","validate-python-is-installed#Validate Python is installed":"Once you have Python installed you should be able to run the following command in the terminal:\npython --version # =\u003e Python 3.12.0 "},"title":"Install Python"},"/docs/prepare-the-book/":{"data":{"":"Once we have Python installed we need to create the folders\nstructure in which weŕe going to write the code for each\nchapter.","create-a-new-python-project#Create a new Python project":"After that we’re in position of creating the project using poetry.\nTo do it, just run the following command in the terminal:\npoetry init This command will create a new file called pyproject.toml in which the dependencies will be saved.\npoetry add pytest expects ","create-the-folder-for-the-chapters-and-its-tests#Create the folder for the chapters and its tests":"To do so, we need to create a couple of folders with the following command:\nmkdir tests src "},"title":"Prepare the project"}}