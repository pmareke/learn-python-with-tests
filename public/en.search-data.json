{"/docs/":{"data":{"":"","code-examples#Code Examples":"The code for each chapter is available here.","feedback#Feedback":" Add issues/submit PRs here. MIT license","learn-test-driven-development-with-python#Learn Test-Driven Development with Python":"","what-youll-need#What you\u0026rsquo;ll need":"⚠️ This book is just a replication of @quii’s Go book. ⚠️\nLearn Test-Driven Development with Python Explore the Python language by writing tests. Python is a good language for learning TDD because it is a simple language to learn and testing is really simple. Be confident that you’ll be able to start writing robust, well-tested systems in Python. Who this is for People who are interested in picking up Python. People who already know some Python, but want to explore testing more. What you’ll need A computer!. Installed Python. A text editor. Some experience with programming. Comfortable using the terminal. ","who-this-is-for#Who this is for":""},"title":"Learn Python with TDD"},"/docs/chapters/TEMPLATE/":{"data":{"":"","#":"You can find all the code for this chapter here\nWrite the test first Try and run the test Write the minimal amount of code to make it run Write enough code to make it pass Refactor ","wrapping-up#Wrapping up":"What we have covered:"},"title":"TITLE"},"/docs/chapters/booleans/":{"data":{"":"You can find all the code for this chapter here","boolean-operators#Boolean operators":"In Python instead of || or \u0026\u0026 operators, we have the and and or operators to combine boolean expressions.\nWrite the test first Let’s say we have a function that checks if a user has permission to do something.\nThe user must be an admin and logged in:\ndef test_has_permission(self): expect(has_permission(is_admin=True, is_logged_in=False)).to(be_false) Try and run the test ================= short test summary info ================= FAILED test_booleans.py::TestBooleans::test_has_permission NameError: name 'has_permission' is not defined ================= 1 failed in 0.02s ============ Pretty explanatory, we need to define the has_permission function.\nWrite the minimal amount of code to make it run The simplest implementation would be just create it without any logic:\ndef has_permission(is_admin, is_logged_in): pass Re-run the tests:\nE expected: None to be false ================= short test summary info ================= FAILED test_booleans.py::TestBooleans::test_has_permission AssertionError: ================= 1 failed in 0.02s ============ Now the problem is that we’re not returning nothing, that’s good.\nStep by step, let’s make the test pass.\nWrite enough code to make it pass Right now, we only have one test, so we can just return False:\ndef has_permission(is_admin, is_logged_in): return False And the test passes:\n========================= 1 passed in 0.01s ========================= Refactor Now we can add more cases to our test in order to make our function working as expected:\ndef test_has_permission(self): expect(has_permission(True, False)).to(be_false) expect(has_permission(True, True)).to(be_true) expect(has_permission(False, False)).to(be_false) Re-run the tests in order to see them failing.\nAfter that we can implement the has_permissions function:\ndef has_permission(is_admin, is_logged_in): return is_admin and is_logged_in ","comparing-values#Comparing values":"Regardig the comparison of values, we can use the == operator to compare two values as in many other languages, nothing relevante here actually.\nSo just let’s write a test to check if a number is even or not.\nNote: We need to make muscle, so let’s repeat the process again (Red - Green - Refactor)\nWrite the test first def test_is_even(self): expect(is_even(4)).to(be_true) Try and run the test ================= short test summary info ================= FAILED test_booleans.py::TestBooleans::test_is_even NameError: name 'is_even' is not defined ================= 1 failed in 0.02s ======================= Write the minimal amount of code to make it run def is_even(n): pass E expected: None to be true ================= short test summary info ================= FAILED test_booleans.py::TestBooleans::test_is_even AssertionError: ================= 1 failed in 0.02s ======================= Write enough code to make it pass def is_even(n): return True =================== 1 passed in 0.01s ==================== Refactor def test_is_even(self): expect(is_even(4)).to(be_true) expect(is_even(5)).to(be_false) def is_even(n): return n % 2 == 0 ","truthy-and-falsy-in-python#Truthy and Falsy in Python":"In Python, there are a few values that are considered falsy, and everything else is truthy.\nLet’s validate our hypothesis with some tests:\nNote: In order to make our tests more dynamic, we’re going to parametrize them using pytest, more info here.\n@pytest.mark.parametrize( \"value\", [ True, 1, \"Hello\", [1, 2, 3], (1, \"x\") ], ) def test_is_truthy(self, value): expect(is_truthy(value)).to(be_true) @pytest.mark.parametrize( \"value\", [ False, 0, \"\", [], (), None, ], ) def test_is_falsy(self, value): expect(is_truthy(value)).to(be_false) Let’s implement the is_truthy function just casting the value to a boolean:\ndef is_truthy(value): return bool(value) We can say now that as we assumed:\nTrue, 1, strings with values, lists and tuples with item are truthy. False, 0, \"\", [], (), None are falsy. ","wrapping-up#Wrapping up":"What we have covered:\nParametrize our tests in order to test multiple cases. More practice of the TDD workflow. What is truthy and falsy in Python. The and and or operators. Comparing values. "},"title":"Booleans"},"/docs/chapters/hello-world/":{"data":{"":"You can find all the code for this chapter here\nIt is traditional for your first program in a new language to be Hello, World.\nCreate a folder wherever you like. Create a new file in it called hello.py and put the following code inside it: def hello(): print(\"Hello, world\") hello() To run it type python hello.py.","how-it-works#How it works":"When you write a program in Python you just can define a method and after that just call it.\nThe def keyword is how you define a function with a name and a body.\nPython provide out of the box a function called print that we use to print out to the console.","how-to-test#How to test":"How do you test this? It is good to separate your “domain” code from the outside world (side-effects).\nThe print is a side effect (printing to stdout) and the string we send in is our domain.\nSo let’s separate these concerns so it’s easier to test\ndef hello(): return \"Hello, world\" print(hello()) We have created a new function again with def called hello.\nNow create a new file called test_hello.py where we are going to write a test for our hello function\nfrom expects import equal, expect from hello import hello class TestHello: def test_hello(self): expect(hello()).to(equal(\"Hello, world\")) "},"title":"Hello World"},"/docs/chapters/lists/":{"data":{"":"","#":"You can find all the code for this chapter here\nWrite the test first from expects import expect, equal class TestList: def test_add(self): list = add([], 1) expect(list).to(equal([1])) Try and run the test ================= short test summary info ================= FAILED test_list.py::TestList::test_list NameError: name 'add' is not defined ================= 1 failed in 0.02s ======================= Write the minimal amount of code to make it run def add(list, item): pass If we run the test again we should see a different error.\nE expected: None to be [1] ================= short test summary info ================= FAILED test_list.py::TestList::test_list AssertionError: ================= 1 failed in 0.02s ============ Write enough code to make it pass def add(list, item): return [item] If we run the test again it should pass.\n========================= 1 passed in 0.01s ========================= Refactor from expects import expect, equal class TestList: def test_add(self): list = add([], 1) lisr = add(list, 2) expect(list).to(equal([1, 2])) def add(list, item): return list + [item] ","wrapping-up#Wrapping up":"What we have covered:\nMore practice of the TDD workflow. Working with lists. ","your-turn#Your turn":"A great way to learn is doing, so here are some ideas to keep practicing:\nWrite a test for the other operations like remove an item on the list, calculate the length of a list or check if a list contains an item. "},"title":"Lists"},"/docs/chapters/numbers/":{"data":{"":"","#":"You can find all the code for this chapter here\nNumbers in Python work as you would expect. There are two main types:\nint for integer numbers. float for decimal numbers. Note: There is also the complex type, but we won’t be covering that here.\nOperators Python is actualy quite normal regarding numbers, you can apply them the typical operations like:\n+ for addition. - for subtraction. * for multiplication. / for division. // for integer division. % for modulo. ** for exponentiation. So let’s write an add function to try things out and play a little bit with them!.\nCreate a test file called test_adder.py and write this code.\nWrite the test first from expects import equal, expect class TestAdder: def test_add(self): result = add(1, 2) expect(result).to(equal(3)) Try and run the test ================= short test summary info ================= FAILED test_adder.py::TestAdder::test_add NameError: name 'add' is not defined ================= 1 failed in 0.02s ============ Write the minimal amount of code to make it run Write enough code to satisfy the compiler and that’s all - remember we want to check that our tests fail for the correct reason.\ndef add(a, b): pass If we run the test again we should see a different error.\nE expected: None to be 2 ================= short test summary info ================= FAILED test_adder.py::TestAdder::test_add AssertionError: ================= 1 failed in 0.02s ============ Write enough code to make it pass In the strictest sense of TDD we should now write the minimal amount of code to make the test pass. A pedantic programmer may do this\ndef add(a, b): return 3 If we run the test again it should pass.\n========================= 1 passed in 0.01s ========================= Refactor We could write another test, with some different numbers to force that test to fail but that feels.\nOr we can parametrize the test to make it more flexible.\nimport pytest from adder import add from expects import equal, expect class TestAdder: @pytest.mark.parametrize( \"x,y,expected\", [ (1, 2, 3), (2, 2, 4), (10, 100, 110), ], ) def test_add(self, x, y, expected): result = add(x, y) expect(result).to(equal(expected)) If you now run the tests you should see them fail.\n================= short test summary info ================= ... E expected: 4 to be 3 FAILED test_adder.py::TestAdder::test_add AssertionError: ... E expected: 110 to be 3 FAILED test_adder.py::TestAdder::test_add AssertionError: ... ================= 1 failed in 0.02s ============ Let’s fix it!\ndef add(a, b): return a + b ========================= 3 passed in 0.01s ========================= ","wrapping-up#Wrapping up":"What we have covered:\nMore practice of the TDD workflow. Integers, Decimals, addition. Principal numbers operations in Python. ","your-turn#Your turn":"A great way to learn is doing, so here are some ideas to keep practicing:\nWrite a test for the other operations like subtraction, multiplication, division, etc. "},"title":"Numbers"},"/docs/chapters/ranges/":{"data":{"":"","#":"You can find all the code for this chapter here\nhttps://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range\nWrite the test first Try and run the test Write the minimal amount of code to make it run Write enough code to make it pass Refactor ","wrapping-up#Wrapping up":"What we have covered:"},"title":"Ranges"},"/docs/chapters/tuples/":{"data":{"":"","#":"You can find all the code for this chapter here\nhttps://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range\nWrite the test first Try and run the test Write the minimal amount of code to make it run Write enough code to make it pass Refactor ","wrapping-up#Wrapping up":"What we have covered:"},"title":"Tuples"},"/docs/install-pytest/":{"data":{"":"For this book we’re going to use Pytest as the testing framerwork and expects as our assertion library.","how-to-install-pytest-and-expects#How to install Pytest and Expects":"In order to add a new library in our project we just need to run the following command:\npoetry add pytest expects If everything works fine now we’re in a position to create our first test.","validate-pytest-is-installed#Validate Pytest is installed":"You can find all the code for this chapter here\nOnce you have Pytest installed you need to create a new file called test_foo.py inside the src folder with the following code (right now don’t care about it!):\nfrom expects import expect, equal class TestFoo: def test_bar(self) -\u003e None: expect(1).to(equal(1)) Save the file and run the following command in the terminal:\npoetry run pytest You should see something like these results:\ntest_foo.py . [100%] ==================== 1 passed in 0.01s ==================== "},"title":"Install Pytest"},"/docs/install-python/":{"data":{"":"","how-to-install-python#How to install Python":"There a couple of ways to install Python in your computer:\nYou can go to the official page and follow the given instructions for your operation system. You can use the asdf. ","install-poetry#Install Poetry":"In this book we will be using Poetry as our dependency manager.\nIn order to install Poetry you can run the following command:\ncurl -sSL https://install.python-poetry.org | python3 - ","validate-python-is-installed#Validate Python is installed":"Once you have Python installed you should be able to run the following command in the terminal:\npython --version # =\u003e Python 3.12.0 "},"title":"Install Python"},"/docs/prepare-the-book/":{"data":{"":"Once we have Python installed we need to create the folders\nstructure in which weŕe going to write the code for each\nchapter.","create-a-new-python-project#Create a new Python project":"After that we’re in position of creating the project using poetry.\nTo do it, just run the following command in the terminal:\npoetry init This command will create a new file called pyproject.toml in which the dependencies will be saved.\npoetry add pytest expects ","create-the-folder-for-the-chapters-and-its-tests#Create the folder for the chapters and its tests":"To do so, we need to create a couple of folders with the following command:\nmkdir tests src "},"title":"Prepare the project"}}